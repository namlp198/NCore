using Npc.Foundation.Helper;
using Npc.Foundation.Logger;
using NpcCore.Wpf.Enums;
using NpcCore.Wpf.Helpers;
using System;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;

namespace NpcCore.Wpf.Core
{
    public static class MeshCreator
    {
        public const int LeftSide = 0;
        public const int RightSide = 1;
        private static double _scaleX = 1.0;
        private static double _scaleY = 1.0;
        private static double _scaleZ = 1.0;
        public static PixelColor[,] PalletImage { get; private set; }
        static MeshCreator()
        {
            //BitmapImage bitmap = new BitmapImage(new Uri("Resources/Pallet.jpg", UriKind.Relative));
            try
            {
                byte[] ImageByte = Convert.FromBase64String(" + ZAA + ZAA + ZAA + ZAA + ZAA + ZAA + ZAA + ZAA + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAA + ZAA + ZAA + ZAA + ZAA + ZAA + ZAA + ZAA + JAB + JAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + JEA + JEA + JEA + JEA + JEA + JEA + JEA + JEA + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAB + ZAA + ZAA + ZAA + ZAA + ZAA + ZAA + ZAA + ZAA + pYB + ZUA / JYB + 5UA / JYB + 5UA + ZUA + ZUA + ZUA + ZUA + ZUA + pYB + ZUA + ZUA + pYB + ZUA + 5UA + 5UA + 5UA + 5UA + 5UA + 5UA + 5UA + 5UA + ZUA + pYB + ZUA + ZUA + ZUA + ZUA + ZUA + ZUA + ZUA + ZUA + ZUA + 5UA + 5UA + ZUA + ZUA + ZUA + ZUA + ZUA + ZUA + ZUA + pYB + ZUA + ZUA + pYB + 5UA + 5UA + 5UA + 5UA + 5UA + 5UA + 5UA + 5UA + pYB + ZUA + ZUA + pYB + pYB + ZUA + ZUA + pYB + 5sB / ZsB / pwC / ZsB / ZsB / ZsB / ZsB + 5sB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB + 5sB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB + 5sB + 5wA + 5wA + 5wA + 5wA + 5wA + 5wA + 5wA + 5wA / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB / ZsB + 5wA + 5wA + 5wA + 5wA + 5wA + 5wA + 5wA + 5wA / KEA / KEA / 6EB / qAA / qAA / qAA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / qAA / qAA / qAA / qAA / qAA / qAA / qAA / qAA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / aIB / aIB / aIB / KEA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / qAA / qAA / qAA / qAA / qAA / qAA / qAA / qAA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / KEA / 6YB / qUA / 6YB / qUA / 6YB / 6YB / qUA / qUA / qUA / 6YB / qUA / qUA / 6YB / qUA / qUA / qUA / 6YB / 6YB / 6YB / 6YB / qUA / qUA / qUA / qUA / qUA / qUA / qUA / 6YB / 6YB / 6YB / 6YB / 6YB / qUA / qUA / 6YB / 6YB / 6YB / 6YB / 6YB / 6YB / qUA / qUA / 6YB / qUA / qUA / qUA / 6YB / qUA / 6YB / qUA / 6YB / 6YB / 6YB / 6YB / qUA / 6YB / 6YB / 6YB / 6YB / 6YB / 6YB / 6YB / 6YB / 6YB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6oA / 6oA / 6oA / 6oA / 6oA / 6oA / 6sB / 6sB / 6sB / 6sB / 6sB / 6oA / 6oA / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6oA / 6oA / 6wA / 6wA / 6wA / 6wA / 6sA / 6wA / 6wA / 6wA / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6sB / 6wA / 6wA / 6wA / 6wA / 6wA / 6wA / 6wA / 6wA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7EA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7cB / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7YA / 7sA / 7sA / rsA / rsA / rsA / 7wB / 7sA / 7sA / rsA / rsA / rsA / rsA / rsA / rsA / 7wB / rsA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / rsA / rsA / rsA / rsA / rsA / 7wB / 7wB / rsA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / rsA / rsA / rsA / rsA / rsA / rsA / rsA / rsA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 7sA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8AA / 8AA / r8A / r8A / 8AA / 8AA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8AA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8EA / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8YC / 8YC / 8UB / 8UB / 8UB / 8UB / 8YC / 8YC / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / 8UB / ssA / ssA / ssA / coA / coA / ssA / ssA / ssA / soB / soB / soB / soB / soB / soB / soB / soB / soB / soB / soB / soB / soB / soB / soB / soB / ssA / ssA / ssA / ckA / ckA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / ssA / soB / soB / soB / soB / soB / soB / soB / soB / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 88A / 88A / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 88A / 88A / 88A / 88A / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 9AA / 88A / 88A / 9AA / 88A / 88A / 9AA / 88A / 88A / 9QB / 9QB / 9QB / 9QB / 9QB / 9QB / 9QB / 9QB / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tQA / tMA / tMA / tMA / tMA / tMA / tMA / tQA / tMA / 9QB / 9QB / tMA / tMA / 9QB / 9QB / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / tMA / 9QB / tMA / tMA / 9QB / tMA / tMA / 9kB / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9kB / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9kB / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9kB / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9kB / 9gA / 9gA / 9kB / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9gA / 9guYA / uYA / eUA / eUA / eUA / eUA / uYA / uYA / uYA / uYA / uYA / eUA / eUA / uYA / eUA / eUA / eUA / uYA / uYA / uYA / uYA / uYA / eUA / uYA / uYA / uYA / uYA / uYA / uYA / uYA / uYA / uYA / uYA / uYA / uYA / uYA / eUA / eUA / eUA / eUA / uYA / uYA / uYA / uYA / uYA / uYA / uYA / uYA / eUA / eUA / uYA / uYA / uYA / uYA / eUA / eUA / uYA / uYA / eUA / uYA / uYA / eUA / eUA / uYA / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / ugA / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +kB / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +4B / +4B / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +0A / +4B / ");

                BitmapImage bitmap = ByteToBitmapImage(ImageByte);
                if (bitmap !=null)
                {
                    var pixels = bitmap.CopyPixels();
                    PalletImage = pixels.Slice(0, 0, bitmap.PixelHeight - 1, 1);
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public static BitmapImage ByteToBitmapImage(byte[] imageData)
        {
            if (imageData == null || imageData.Length <= 0)
                return null;

            var image = new BitmapImage();
            using (var mem = new MemoryStream(imageData))
            {
                mem.Position = 0;
                image.BeginInit();
                image.CreateOptions = BitmapCreateOptions.PreservePixelFormat;
                image.CacheOption = BitmapCacheOption.OnLoad;
                image.UriSource = null;
                image.StreamSource = mem;
                image.EndInit();
            }
            image.Freeze();

            return image;
        }

       

        /// <summary>
        /// Method that create the 3d on a Viewport3D control
        /// </summary>
        /// <param name="group"></param>
        /// <param name="image3D">data to show 3D</param>
        /// <param name="width">position till which x coordinate can draw along the map</param>
        /// <param name="length">position till which z coordinate can draw along the map</param>
        /// <param name="image2D">data to show 2D</param>
        /// <param name="isShowTexture">true if make the surface's material using an image brush; otherwise, false.</param>
        /// <param name="ratio"></param>
        public static GeometryModel3D DefineModel(float[] image3D, int width, int length, float yMin, float yMax, double xScale, double yScale, double zScale, byte[] image2D = null, TextureType type = TextureType.Default)
        {
            if (xScale > 0)
                _scaleX = xScale;
            if (zScale > 0)
                _scaleY = zScale;
            if (yScale > 0)
                _scaleZ = yScale;
            float[,] map = ArrayHelper.ToRectangular(image3D, width);
            double height = 0.0;
            if (yMin < 0)
                height = yMax - yMin;
            else
                height = yMax;
            double halfSizeX = width / 2.0;
            double halfSizeZ = length / 2.0;
            double halfSizeY = height * 0.5;

            // Make a mesh to hold the surface.
            MeshGeometry3D mesh = new MeshGeometry3D();
            Int32Collection triangleIndices = new Int32Collection();
            Point3DCollection positions = new Point3DCollection();

            //defining point and triangles
            int ind1 = 0;
            int ind2 = 0;
            for (var z = 0; z < length; z++)
            {
                for (var x = 0; x < width; x++)
                {
                    double originValue = 0.0;
                    if (yMin < 0.0)
                        originValue = yMin;
                    var point = new Point3D(x * _scaleX, (map[z, x] - originValue) * _scaleY, z * _scaleZ);
                    positions.Add(point);

                    ind1 = x + z * width;
                    ind2 = ind1 + width;

                    //first triangle
                    triangleIndices.Add(ind1);
                    triangleIndices.Add(ind2);
                    triangleIndices.Add(ind2 + 1);

                    //second triangle
                    triangleIndices.Add(ind1);
                    triangleIndices.Add(ind2 + 1);
                    triangleIndices.Add(ind1 + 1);
                }
            }
            mesh.Positions = positions;
            mesh.TriangleIndices = triangleIndices;
            // Make the mesh's model.
            GeometryModel3D model = new GeometryModel3D();
            model.Geometry = mesh;
            model.ApplyMaterial(image3D, width, length, image2D, type);
            // Create transforms
            TranslateTransform3D transform = new TranslateTransform3D(-halfSizeX * _scaleX, -halfSizeY * _scaleY, -halfSizeZ * _scaleZ);
            model.Transform = transform;

            return model;
        }

        public static GeometryModel3D DefineBoundingModel(float[] image3D, int width, int length, double yMin, double yMax, byte[] image2D = null, TextureType type = TextureType.Default)
        {
            float[,] map = ArrayHelper.ToRectangular(image3D, width);
            double height = 0.0;
            if (yMin < 0.0)
                height = yMax - yMin;
            else
                height = yMax;
            double halfSizeX = width / 2.0;
            double halfSizeZ = length / 2.0;
            double halfSizeY = height * 0.5;

            // Make a mesh to hold the surface.
            MeshGeometry3D mesh = new MeshGeometry3D();
            Int32Collection triangleIndices = new Int32Collection();
            Point3DCollection positions = new Point3DCollection();

            //defining point and triangles
            int ind1 = 0;
            int ind2 = 0;

            double originValue = 0.0;
            if (yMin < 0.0)
                originValue = yMin;

            int indexLeft = ind1;
            for (var z = 0; z < length; z++)
            {
                for (int i = 0; i < 2; i++)
                {
                    double yValue = 0.0;
                    if (i == 0)
                    {
                        if (yMin < 0)
                            yValue = yMin;
                        else
                            yValue = 0;
                    }
                    else
                    {
                        yValue = map[z, 0];
                    }
                    var point = new Point3D(0, (yValue - originValue) * _scaleY, z * _scaleZ);
                    positions.Add(point);
                    ind1 = indexLeft + i + z * 2;
                    ind2 = ind1 + 1;

                    //first triangle
                    triangleIndices.Add(ind1);
                    triangleIndices.Add(ind2);
                    triangleIndices.Add(ind2 + 1);

                    //second triangle
                    triangleIndices.Add(ind1);
                    triangleIndices.Add(ind2 + 1);
                    triangleIndices.Add(ind1 + 1);
                }
            }

            int indexFront = ind1 + 1;
            for (var x = 0; x < width; x++)
            {
                for (int i = 0; i < 2; i++)
                {
                    double yValue = 0.0;
                    if (i == 0)
                    {
                        if (yMin < 0)
                            yValue = yMin;
                        else
                            yValue = 0;
                    }
                    else
                    {
                        yValue = map[length - 1, x];
                    }
                    var point = new Point3D(x * _scaleX, (yValue - originValue) * _scaleY, (length - 1) * _scaleZ);
                    positions.Add(point);

                    ind1 = indexFront + i + x * 2;
                    ind2 = ind1 + 1;

                    //first triangle
                    triangleIndices.Add(ind1);
                    triangleIndices.Add(ind2);
                    triangleIndices.Add(ind2 + 1);

                    //second triangle
                    triangleIndices.Add(ind1);
                    triangleIndices.Add(ind2 + 1);
                    triangleIndices.Add(ind1 + 1);
                }
            }

            int indexRight = ind1 + 1;
            for (var z = length - 1; z >= 0; z--)
            {
                for (int i = 0; i < 2; i++)
                {
                    double yValue = 0.0;
                    if (i == 0)
                    {
                        if (yMin < 0)
                            yValue = yMin;
                        else
                            yValue = 0;
                    }
                    else
                    {
                        yValue = map[z, width - 1];
                    }
                    var point = new Point3D((width - 1) * _scaleX, (yValue - originValue) * _scaleY, z * _scaleZ);
                    positions.Add(point);

                    ind1 = indexRight + i + (length - 1 - z) * 2;
                    ind2 = ind1 + 1;

                    //first triangle
                    triangleIndices.Add(ind1);
                    triangleIndices.Add(ind2);
                    triangleIndices.Add(ind2 + 1);

                    //second triangle
                    triangleIndices.Add(ind1);
                    triangleIndices.Add(ind2 + 1);
                    triangleIndices.Add(ind1 + 1);
                }
            }

            int indexBack = ind1 + 1;
            for (var x = width - 1; x >= 0; x--)
            {
                for (int i = 0; i < 2; i++)
                {
                    double yValue = 0.0;
                    if (i == 0)
                    {
                        if (yMin < 0)
                            yValue = yMin;
                        else
                            yValue = 0;
                    }
                    else
                    {
                        yValue = map[0, x];
                    }
                    var point = new Point3D(x * _scaleX, (yValue - originValue) * _scaleY, 0);
                    positions.Add(point);

                    ind1 = indexBack + i + (width - 1 - x) * 2;
                    ind2 = ind1 + 1;

                    //first triangle
                    triangleIndices.Add(ind1);
                    triangleIndices.Add(ind2);
                    triangleIndices.Add(ind2 + 1);

                    //second triangle
                    triangleIndices.Add(ind1);
                    triangleIndices.Add(ind2 + 1);
                    triangleIndices.Add(ind1 + 1);
                }
            }
            mesh.Positions = positions;
            mesh.TriangleIndices = triangleIndices;
            // Make the mesh's model.
            GeometryModel3D model = new GeometryModel3D();
            model.Geometry = mesh;
            Material material = MaterialHelper.Create((Color)ColorConverter.ConvertFromString("#546683"));
            model.Material = material;

            // Create transforms
            TranslateTransform3D transform = new TranslateTransform3D(-halfSizeX * _scaleX, -halfSizeY * _scaleY, -halfSizeZ * _scaleZ);
            model.Transform = transform;

            return model;
        }

        public static GeometryModel3D DrawCrossPlane(Point3D point1, Point3D point2, double adjustHeight, double opacity = 0.3)
        {
            MeshGeometry3D mesh = new MeshGeometry3D();
            mesh.AddSmoothPlane(point1, point2, adjustHeight);

            var surfaceMaterial = MaterialHelper.Create(Colors.White, opacity);

            // Make the mesh's model.
            GeometryModel3D model = new GeometryModel3D(mesh, surfaceMaterial);
            model.BackMaterial = surfaceMaterial;

            return model;
        }

        public static GeometryModel3D DrawBasePlane(Point3D point1, Point3D point2, Point3D point3, Point3D point4, double opacity = 0.2)
        {
            // [NCS-2695] CID 171194 Logically dead code
            //MeshGeometry3D mesh = new MeshGeometry3D();
            //if (mesh != null)
            //{
            //    mesh.AddBasePlane(point1, point2, point3, point4);
            //    var surfaceMaterial = MaterialHelper.Create(Colors.White, opacity);
            //    GeometryModel3D model = new GeometryModel3D(mesh, surfaceMaterial);
            //    if (model != null)
            //    {
            //        model.BackMaterial = surfaceMaterial;
            //    }
            //    return model;
            //}
            //return null;
            MeshGeometry3D mesh = new MeshGeometry3D();
            mesh.AddBasePlane(point1, point2, point3, point4);
            var surfaceMaterial = MaterialHelper.Create(Colors.White, opacity);
            return new GeometryModel3D(mesh, surfaceMaterial) { BackMaterial = surfaceMaterial };
        }

        public static GeometryModel3D DrawBaseLine(Point3D point1, Point3D point2, Point3D point3, Point3D point4, double opacity = 1)
        {
            // [NCS-2695] CID 171185 Logically dead code
            //MeshGeometry3D mesh = new MeshGeometry3D();
            //if (mesh != null)
            //{
            //    mesh.AddSmoothLine(point1, point2, new Vector3D(0,1,0), 0.2);
            //    mesh.AddSmoothLine(point2, point3, new Vector3D(0, 1, 0), 0.2);
            //    mesh.AddSmoothLine(point3, point4, new Vector3D(0, 1, 0), 0.2);
            //    mesh.AddSmoothLine(point4, point1, new Vector3D(0, 1, 0), 0.2);
            //    var surfaceMaterial = MaterialHelper.Create(Colors.White, opacity);
            //    GeometryModel3D model = new GeometryModel3D(mesh, surfaceMaterial);
            //    if (model != null)
            //    {
            //        model.BackMaterial = surfaceMaterial;
            //    }
            //    return model;
            //}
            //return null;
            MeshGeometry3D mesh = new MeshGeometry3D();
            mesh.AddSmoothLine(point1, point2, new Vector3D(0, 1, 0), 0.2);
            mesh.AddSmoothLine(point2, point3, new Vector3D(0, 1, 0), 0.2);
            mesh.AddSmoothLine(point3, point4, new Vector3D(0, 1, 0), 0.2);
            mesh.AddSmoothLine(point4, point1, new Vector3D(0, 1, 0), 0.2);
            var surfaceMaterial = MaterialHelper.Create(Colors.White, opacity);
            return new GeometryModel3D(mesh, surfaceMaterial) { BackMaterial = surfaceMaterial };
        }

        public static GeometryModel3D DrawDragSurface(double width, double length, double height)
        {
            double halfSizeX = width / 2.0;
            double halfSizeZ = length / 2.0;

            MeshGeometry3D mesh = new MeshGeometry3D();
            mesh.DrawRectangle(new Rectangle3D(
                            new Point3D(-halfSizeX, height, -halfSizeZ),
                            new Point3D(-halfSizeX, height, halfSizeZ),
                            new Point3D(halfSizeX, height, halfSizeZ),
                            new Point3D(halfSizeX, height, -halfSizeZ)
            ));

            var surfaceMaterial = MaterialHelper.Create(Colors.Blue, 0.1);

            // Make the mesh's model.
            GeometryModel3D model = new GeometryModel3D(mesh, surfaceMaterial);

            // Make the surface visible from both sides.
            model.BackMaterial = surfaceMaterial;

            return model;
        }

        public static GeometryModel3D DrawCrossPoint(Point3D point, double radius, Color color, string name = null)
        {
            var material = MaterialHelper.Create(color);
            // Draw Sphere
            MeshGeometry3D mesh = new MeshGeometry3D();
            mesh.AddSmoothSphere(point, radius, 10, 20);
            GeometryModel3D model = new GeometryModel3D(mesh, material);
            model.BackMaterial = material;
            AutomationProperties.SetName(model, name);
            return model;
        }

        public static GeometryModel3D DrawColumn(Point3D point, Vector3D vectorLength, double radius, Color color, string name = null)
        {
            var material = MaterialHelper.Create(color);
            MeshGeometry3D columnCrossSection = new MeshGeometry3D();
            columnCrossSection.AddSmoothCylinder(point, vectorLength, radius, 20);
            GeometryModel3D model = new GeometryModel3D(columnCrossSection, material);
            model.BackMaterial = material;
            AutomationProperties.SetName(model, name);
            return model;
        }

        public static GeometryModel3D DrawCone(Point3D point, Vector3D axis, double startRadius, double endRadius, Color color, string name = null)
        {
            var material = MaterialHelper.Create(color);
            MeshGeometry3D meshCone = new MeshGeometry3D();
            meshCone.AddSmoothCone(point, axis, startRadius, endRadius, 20);
            GeometryModel3D model = new GeometryModel3D(meshCone, material);
            model.BackMaterial = material;
            AutomationProperties.SetName(model, name);
            return model;
        }

        public static GeometryModel3D DrawPyramid(Point3D point, Vector3D axis, double startRadius, Color color, string name = null, int side = -1, int position = 0)
        {
            GeometryModel3D model = null;
            var material = MaterialHelper.Create(color);
            MeshGeometry3D meshPyramid = new MeshGeometry3D();
            meshPyramid.AddSmoothPyramid(point, axis, startRadius, side, position);
            if (side == LeftSide && color != Colors.Transparent)
            {
                MeshGeometry3D wireFrameMesh = meshPyramid.ConvertToWireframe(0.2);
                if (wireFrameMesh != null)
                {
                    model = new GeometryModel3D(wireFrameMesh, material);
                }
            }
            else
            {
                model = new GeometryModel3D(meshPyramid, material);
            }
            model.Material = material;
            AutomationProperties.SetName(model, name);
            return model;
        }
        public static void UpdateCrossPlane(MeshGeometry3D mesh, Point3D point1, Point3D point2, double adjustHeight)
        {
            // Clear data
            mesh.Positions.Clear();
            mesh.TriangleIndices.Clear();

            // [NCS-2695] CID 171163 Dereference null return (stat)
            //mesh.TextureCoordinates.Clear();
            mesh.TextureCoordinates?.Clear();

            mesh.AddSmoothPlane(point1, point2, adjustHeight);
        }

        public static void ApplyPalletMaterial(this GeometryModel3D model, float ymax, float palletHeight)
        {
            ImageSource bitmap = CreatePalletHeight(ymax, palletHeight);
            ImageBrush brush = new ImageBrush(bitmap);
            Material material = new DiffuseMaterial(brush);
            model.Material = material;
        }

        private static WriteableBitmap CreatePalletHeight(float maxValue, double palletMaxHeight = -1)
        {
            WriteableBitmap wbitmap = null;

            try
            {
                if (maxValue <= 0)
                    return wbitmap;

                if (palletMaxHeight == -1)
                    palletMaxHeight = maxValue;
                else if (palletMaxHeight <= 0)
                    palletMaxHeight = 0;
                else if (palletMaxHeight > maxValue)
                    palletMaxHeight = maxValue;

                palletMaxHeight += EnumHelper.TOLERANCE;

                BitmapPixelMaker bm_maker = null;
                if (maxValue <= 256
                    && palletMaxHeight == maxValue)
                {
                    bm_maker = new BitmapPixelMaker(PalletImage);
                }
                else
                {
                    int pixelWidth = PalletImage.GetLength(1);
                    int pixelHeight = palletMaxHeight / maxValue > 0.2 ? 2048 : 10240;
                    int palletHeight = PalletImage.GetLength(0) - 1;
                    double textureScale = pixelHeight * ((maxValue - palletMaxHeight) / maxValue);

                    // Make the BitmapPixelMaker.
                    bm_maker = new BitmapPixelMaker(pixelWidth, pixelHeight);

                    // Set the pixel colors.
                    PixelColor pixel;
                    for (int iz = 0; iz < pixelHeight; iz++)
                    {
                        int h = 0;
                        if (palletMaxHeight == 0)
                        {
                            h = 0;
                        }
                        else if (iz == pixelHeight - 1)
                        {
                            h = palletHeight;
                        }
                        else if (iz <= textureScale)
                        {
                            h = 0;
                        }
                        else
                        {
                            // Convert into a value between 1 and 255.
                            h = (int)(palletHeight * (iz - textureScale) / (pixelHeight - textureScale));
                            if (h < 1)
                                h = 1;
                            else if (h > palletHeight)
                                h = palletHeight;
                        }

                        pixel = PalletImage[h, 0];
                        for (int ix = 0; ix < pixelWidth; ix++)
                        {
                            bm_maker.SetPixel(ix, iz, pixel.Red, pixel.Green, pixel.Blue, pixel.Alpha);
                        }
                    }
                }

                // Convert the BitmapPixelMaker into a WriteableBitmap.
                wbitmap = bm_maker.MakeBitmap(96, 96);
            }
            catch (Exception ex)
            {
                LogHelper.Fatal(ex);
            }

            return wbitmap;
        }

        public static void ApplyMaterial(this GeometryModel3D model, float[] image3D, int width, int length, byte[] image2D = null, TextureType type = TextureType.Default, float palletHeight = -1)
        {
            MeshGeometry3D mesh = model.Geometry as MeshGeometry3D;
            if (mesh != null && image3D != null)
            {
                // [NCS-2695] CID 171187 Dereference null return (stat)
                //mesh.TextureCoordinates.Clear();
                mesh.TextureCoordinates?.Clear();

                mesh.TextureCoordinates = CreateTextureCoordinates(image3D, width, length, type);
                Material material = null;
                double height = image3D.Max() - image3D.Min();
                switch (type)
                {
                    case TextureType.Pallet:
                        material = CreatePalletMaterial(height, palletHeight);
                        break;
                    case TextureType.Image:
                        material = MaterialHelper.Create(ImageProcessingHelper.LoadImage(image2D));
                        break;
                    default:
                        break;
                }
                if (material == null)
                {
                    material = MaterialHelper.Create(Colors.LightGray);
                }
                model.Material = material;
            }
        }

        public static void ApplyMaterialByImageData(this GeometryModel3D model, float[] image3D, int width, int length, byte[] image2D = null, TextureType type = TextureType.Default, float palletMaxHeight = -1)
        {
            // [NCS-2695] CID 171147 Unchecked dynamic_cast
            //MeshGeometry3D mesh = model.Geometry as MeshGeometry3D;
            //mesh.TextureCoordinates = CreateTextureCoordinates(image3D, width, length, type);
            if (model.Geometry is MeshGeometry3D mesh)
            {
                if (null != mesh)
                {
                    mesh.TextureCoordinates = CreateTextureCoordinates(image3D, width, length, type);
                }
            }

            Material material = null;
            material = MaterialHelper.Create(ImageProcessingHelper.LoadImage(image2D));

            if (material == null)
            {
                material = MaterialHelper.Create(Colors.LightGray);
            }

            model.Material = material;
        }

        public static void CreateMapImageByRange(this GeometryModel3D model, float[] sdata, int imageWidth, int imageHeight, double lowerValue, double upperValue)
        {
            if (model != null)
            {
                model.Material = null;
                MeshGeometry3D mesh = model.Geometry as MeshGeometry3D;
                if (mesh != null)
                {
                    mesh.TextureCoordinates = CreateTextureCoordinates(sdata, imageWidth, imageHeight, TextureType.Default);
                    System.Windows.Media.Imaging.WriteableBitmap wbmp = new System.Windows.Media.Imaging.WriteableBitmap(
                            imageWidth, imageHeight, 96, 96, System.Windows.Media.PixelFormats.Bgra32, null);

                    Color colorGood = new Color();
                    colorGood = (Color)ColorConverter.ConvertFromString("#FFA9A9B6");
                    Color negativColorGood = (Color)ColorConverter.ConvertFromString("#FF7D7D80");
                    Color colorNotGood = new Color();
                    colorNotGood = Color.FromArgb(127, 255, 92, 105);

                    byte[,,] pixels = new byte[imageHeight, imageWidth, 4];
                    for (int row = 0; row < imageHeight; row++)
                    {
                        for (int col = 0; col < imageWidth; col++)
                        {
                            int count = row * imageWidth + col;
                            double heightValue = 0.0;
                            if (count < sdata.Length)
                                heightValue = sdata[count];
                            if (heightValue >= lowerValue && heightValue <= upperValue)
                            {
                                if (heightValue > 0)
                                {
                                    if (colorGood != null)
                                    {
                                        pixels[row, col, 3] = colorGood.A;
                                        pixels[row, col, 2] = colorGood.R; //R
                                        pixels[row, col, 1] = colorGood.G; //G
                                        pixels[row, col, 0] = colorGood.B; //B
                                    }
                                }
                                else
                                {
                                    if (negativColorGood != null)
                                    {
                                        pixels[row, col, 3] = negativColorGood.A;
                                        pixels[row, col, 2] = negativColorGood.R; //R
                                        pixels[row, col, 1] = negativColorGood.G; //G
                                        pixels[row, col, 0] = negativColorGood.B; //B
                                    }
                                }
                                
                            }
                            else
                            {
                                if (colorNotGood != null)
                                {
                                    pixels[row, col, 3] = colorNotGood.A;
                                    pixels[row, col, 2] = colorNotGood.R; //R
                                    pixels[row, col, 1] = colorNotGood.G; //G
                                    pixels[row, col, 0] = colorNotGood.B; //B
                                }
                            }
                        }
                    }

                    byte[] pixels1d = new byte[imageHeight * imageWidth * 4];
                    int index = 0;
                    for (int row = 0; row < imageHeight; row++)
                    {
                        for (int col = 0; col < imageWidth; col++)
                        {
                            for (int i = 0; i < 4; i++)
                                pixels1d[index++] = pixels[row, col, i];
                        }
                    }
                    Int32Rect rect = new System.Windows.Int32Rect(0, 0, imageWidth, imageHeight);
                    int stride = 4 * imageWidth;
                    wbmp.WritePixels(rect, pixels1d, stride, 0);
                    wbmp.Freeze();
                    model.Material = MaterialHelper.Create(wbmp);
                }
            }
        }

        public static void ApplyMaterialByPath(this GeometryModel3D model, float[] image3D, int width, int length, TextureType type = TextureType.Default)
        {
            if (model == null)
            {
                return;
            }

            // [NCS-2695] CID 171136 Unchecked dynamic_cast
            //MeshGeometry3D mesh = model.Geometry as MeshGeometry3D;
            //mesh.TextureCoordinates = CreateTextureCoordinates(image3D, width, length, type);
            if (model.Geometry is MeshGeometry3D mesh)
            {
                if (null != mesh)
                {
                    mesh.TextureCoordinates = CreateTextureCoordinates(image3D, width, length, type);
                }
            }

            Material material = null;

            byte[] ImageByte = Convert.FromBase64String("iVBORw0KGgoAAAANSUhEUgAAAhcAAAIXBAMAAADd92F7AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAIVBMVEVHcEwAru8Aru8Aru8Aru8Aru8Aru8Aru8Aru8Aru/////h1V9LAAAACXRSTlMAQIC/n99wz+88NFcoAAAAAWJLR0QKaND0VgAAAAd0SU1FB+QFBwg6GsLuMkYAAAObSURBVHja7d2xSkNBEAXQp/5AIqLYydMUdkIQtbWzTZfS0lKsUlvZaV5i3L81QsBJeNMtaHFuO0xzWKa7bHPYyiaD5rLIJmcwfrPG6LJXc1Em2ehhWXWpLfNsMir32Wi6qLp0/oMxb5LslatsdNpVXWrKezY5KINsdPdRdWkfBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBoxdjMUwyXF5zkZPq6pLw/KRTU7KYzaafVZdOtJRi4ERssZYjpPclNdsNPuqujQuXTa5LS/Z6G1VdenaAd05oDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgRAyFPYW9nsAIUdhT2EsPKAwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYEUNhT2GvJzBCFPYU9tIDCgMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQNGxFDYU9jrCYwQhT2FvfSAwoABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABI8H462bY/wmMEBghbsb2zYABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABA0aC4R+18I/aXzfD/k9ghPiVc/tXTgc0HFAYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMCKGwp7CXk9ghCjsKeylBxQGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGDBgwYMCAAQMGjIihsKew1xMYIQp7CnvpAYUBAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABAwYMGDBgwIABI2Io7Cns9QRGiMKewl56QGHAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAiBhdm+SiTLLRw7LqUlvm2WRU7rPRdFF16VxHLQZGyFlz2Momg28hSO6HMQbZ3QAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMC0wNS0wN1QwODo1ODoyNSswMDowMOdxBDwAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjAtMDUtMDdUMDg6NTg6MjUrMDA6MDCWLLyAAAAAAElFTkSuQmCC");
            BitmapImage bitmap = ByteToBitmapImage(ImageByte);
            if (bitmap !=null)
            material = MaterialHelper.Create(bitmap);

            if (material == null)
            {
                material = MaterialHelper.Create(Colors.LightGray);
            }
            model.Material = material;
        }

        public static Material CreatePalletMaterial(double ymax, double palletHeight)
        {
            ImageSource bitmap = PalletImageMaker.DefineImage(ymax, palletHeight);
            Material material = MaterialHelper.Create(bitmap);
            return material;
        }

        /// <summary>
        /// Create the altitude map texture bitmap.
        /// </summary>
        public static WriteableBitmap CreateAltitudeMap(short[] sdata, int imageWidth, int imageHeight)
        {
            WriteableBitmap wbmp = new WriteableBitmap(
                        imageWidth, imageHeight, 96, 96, PixelFormats.Bgra32, null);

            byte[,,] pixels = new byte[imageHeight, imageWidth, 4];

            int sdataidx = 0;
            for (int row = 0; row < imageHeight; row++)
            {
                for (int col = 0; col < imageWidth; col++)
                {
                    int r, g, b;
                    double h = (double)sdata[sdataidx++];

                    // [NCS-2695] CID 171154 Result is not floating-point
                    //h = h / (short.MaxValue / 16);
                    h = h / (short.MaxValue / 16d);

                    HsvToRgb((double)360 * h, 1, 1, out r, out g, out b);

                    pixels[row, col, 2] = (byte)r; //R
                    pixels[row, col, 1] = (byte)g; //G
                    pixels[row, col, 0] = (byte)b; //B

                    pixels[row, col, 3] = 255;
                }
            }

            byte[] pixels1d = new byte[imageHeight * imageWidth * 4];
            int index = 0;
            for (int row = 0; row < imageHeight; row++)
            {
                for (int col = 0; col < imageWidth; col++)
                {
                    for (int i = 0; i < 4; i++)
                        pixels1d[index++] = pixels[row, col, i];
                }
            }

            Int32Rect rect = new Int32Rect(0, 0, imageWidth, imageHeight);
            int stride = 4 * imageWidth;
            wbmp.WritePixels(rect, pixels1d, stride, 0);
            wbmp.Freeze();

            // Save the bitmap into a file.
            // wbmp.Save("Texture.png")

            return wbmp;
        }

        /// <summary>
        /// Draw x,y,z Axis
        /// </summary>
        public static void DrawAxis(Model3DGroup group, double length = 300.0, double radius = 0.3)
        {
            // The models.
            GeometryModel3D XArrowModel, YArrowModel, ZArrowModel;

            // X = Red.
            MeshGeometry3D xAxis = new MeshGeometry3D();
            xAxis.AddSmoothCylinder(new Point3D(0.0, 0.0, 0.0), new Vector3D(length, 0.0, 0.0), radius, 20);
            DiffuseMaterial x_arrow_material = new DiffuseMaterial(Brushes.Red);
            XArrowModel = new GeometryModel3D(xAxis, x_arrow_material);

            // Y = Green.
            MeshGeometry3D yAxis = new MeshGeometry3D();
            yAxis.AddSmoothCylinder(new Point3D(0.0, 0.0, 0.0), new Vector3D(0.0, length, 0.0), radius, 20);
            DiffuseMaterial y_arrow_material = new DiffuseMaterial(Brushes.Green);
            YArrowModel = new GeometryModel3D(yAxis, y_arrow_material);

            // Z = Blue.
            MeshGeometry3D zAxis = new MeshGeometry3D();
            zAxis.AddSmoothCylinder(new Point3D(0.0, 0.0, 0.0), new Vector3D(0.0, 0.0, length), radius, 20);
            DiffuseMaterial z_arrow_material = new DiffuseMaterial(Brushes.Blue);
            ZArrowModel = new GeometryModel3D(zAxis, z_arrow_material);

            // [NCS-2695] CID 171184 Dereference null return (stat)
            //group.Children.Add(XArrowModel);
            //group.Children.Add(YArrowModel);
            //group.Children.Add(ZArrowModel);
            if (group.Children != null)
            {
                group.Children.Add(XArrowModel);
                group.Children.Add(YArrowModel);
                group.Children.Add(ZArrowModel);
            }
        }

        /// <summary>
        /// Convert HSV to RGB
        /// h is from 0-360
        /// s,v values are 0-1
        /// r,g,b values are 0-255
        /// Based upon http://ilab.usc.edu/wiki/index.php/HSV_And_H2SV_Color_Space#HSV_Transformation_C_.2F_C.2B.2B_Code_2
        /// </summary>
        public static void HsvToRgb(double h, double S, double V, out int r, out int g, out int b)
        {
            // ######################################################################
            // T. Nathan Mundhenk
            // mundhenk@usc.edu
            // C/C++ Macro HSV to RGB

            double H = h;
            while (H < 0) { H += 360; }
            while (H >= 360) { H -= 360; }
            double R, G, B;
            if (V <= 0)
            { R = G = B = 0; }
            else if (S <= 0)
            {
                R = G = B = V;
            }
            else
            {
                double hf = H / 60.0;
                int i = (int)Math.Floor(hf);
                double f = hf - i;
                double pv = V * (1 - S);
                double qv = V * (1 - S * f);
                double tv = V * (1 - S * (1 - f));
                switch (i)
                {

                    // Red is the dominant color

                    case 0:
                        R = V;
                        G = tv;
                        B = pv;
                        break;

                    // Green is the dominant color

                    case 1:
                        R = qv;
                        G = V;
                        B = pv;
                        break;
                    case 2:
                        R = pv;
                        G = V;
                        B = tv;
                        break;

                    // Blue is the dominant color

                    case 3:
                        R = pv;
                        G = qv;
                        B = V;
                        break;
                    case 4:
                        R = tv;
                        G = pv;
                        B = V;
                        break;

                    // Red is the dominant color

                    case 5:
                        R = V;
                        G = pv;
                        B = qv;
                        break;

                    // Just in case we overshoot on our math by a little, we put these here. Since its a switch it won't slow us down at all to put these here.

#pragma warning disable S1871 // Two branches in a conditional structure should not have exactly the same implementation
                    case 6:
                        R = V;
                        G = tv;
                        B = pv;
                        break;
                    case -1:
                        R = V;
                        G = pv;
                        B = qv;
                        break;
#pragma warning restore S1871 // Two branches in a conditional structure should not have exactly the same implementation

                    // The color is not defined, we should throw an error.

                    default:
                        // LFATAL("i Value error in Pixel conversion, Value is %d", i)
                        R = G = B = V; // Just pretend its black/white
                        break;
                }
            }
            r = Clamp((int)(R * 255.0));
            g = Clamp((int)(G * 255.0));
            b = Clamp((int)(B * 255.0));
        }

        /// <summary>
        /// Clamp a value to 0-255
        /// </summary>
        public static int Clamp(int i)
        {
            if (i < 0) return 0;
            if (i > 255) return 255;
            return i;
        }

        /// <summary>
        /// Creates the texture coordinates.
        /// </summary>
        /// <param name="image3D">The image 3d.</param>
        /// <param name="width">The width.</param>
        /// <param name="length">The length.</param>
        /// <param name="type">The type.</param>
        /// <returns></returns>
        private static PointCollection CreateTextureCoordinates(float[] image3D, int width, int length, TextureType type)
        {
            var textureCoordinates = new PointCollection();

            float[,] map = ArrayHelper.ToRectangular(image3D, width);
            double ymin = image3D.Min();
            double ymax = image3D.Max();
            switch (type)
            {
                case TextureType.Pallet:
                    {
                        for (var z = 0; z < length; z++)
                        {
                            for (var x = 0; x < width; x++)
                            {
                                double y = map[z, x];
                                Point point = (y <= ymin) ? new Point(0, ymax - ymin) : new Point(1, ymax - y);
                                textureCoordinates.Add(point);
                            }
                        }


                    }
                    break;
                case TextureType.GridBlue:
                    for (var z = 0; z < length; z++)
                    {
                        for (var x = 0; x < width; x++)
                        {
                            double y = map[z, x];
                            Point point = new Point(x, y);
                            textureCoordinates.Add(point);
                        }
                    }
                    break;

                default:
                    for (var z = 0; z < length; z++)
                    {
                        for (var x = 0; x < width; x++)
                        {
                            textureCoordinates.Add(new Point(x, z));
                        }
                    }
                    break;
            }

            return textureCoordinates;
        }
    }
}
